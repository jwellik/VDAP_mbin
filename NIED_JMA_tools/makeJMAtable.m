function [PREF, ALT] = makeJMAtable
%% MAKEJMATABLE Make tables of preferred and alternate volcano name spellings
%% Import data from text file.
% Script for importing data from the following text file:
%
% Reads a file that must be formatted like this:
% ## Known Mis-Spellings or Alternate Names for Volcanoes
% VolcanoID, PreferredName, AlternateNames
% 283190, Zaozan, Zao  an
% 285060, Taisetsuzan, TAISETUSAN
% 290050, Atosanupuri, Etorofu-Atosanupuri/Atosanupri # comments
%
% OUTPUT
% P     : table : Columns are VID, Preferred Name, and AlternateName
%           This is basically the table version of the input file
% T     : table : Columns are Alternates, Preferred, VID
%           Each line corresponds to an alternate name that is listed in
%           column 3 of the input file. This table helps connect mis-spelled or
%           alternate names to a GVP Volcano Number
%
% Header Line - VolcanoID, PreferredName, AlternateNames
% , - Column Seperator
% / - Separate multiple alternate names
% # - Comment: Ignore this row or anything after this symbol
%
%

% Auto-generated by MATLAB on 2017/01/10 09:50:21
% Completed by Jay Wellik on 2017/01/10

%% Initialize variables.
filename = '/Users/jaywellik/Documents/MATLAB/VDAP_mbin/NIED_JMA_tools/@JMA/JMA_name_corrections.txt';
delimiter = ',';

%% Determine location of comment lines, header lines, and datalines
d = textread(filename,'%s','delimiter','\n');

comment_idx = []; header_idx = [];
for i = 1:numel(d)

    if strcmp(d{i}(1), '#')
        comment_idx = [comment_idx; i];
    elseif strcmp(d{i}(1:9), 'VolcanoID')
        header_idx = i;
    end

end
clearvars d i
    

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'HeaderLines', header_idx, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));


%% Split data into numeric and cell columns.
rawNumericColumns = {};
rawCellColumns = raw(:, [1,2,3]);


%% Allocate imported array to column variable names
VolcanoID = rawCellColumns(:, 1);
PreferredName = rawCellColumns(:, 2);
AlternateNames = rawCellColumns(:, 3);

%%

alt_names = {};
preferred_names = {};
vid = {};

for i = 1:numel(AlternateNames)
    
    all_variations = strsplit(AlternateNames{i}, '#'); % split by comment delimitter
    all_variations = all_variations{1}; % remove comments
    AlternateNames_nocomments{i} = strip(all_variations, ' ');
    all_variations = strsplit(all_variations, '/');
        
    for j = 1:numel(all_variations)
    
        alt_names = {alt_names{:}, upper(all_variations{j})};
        preferred_names = {preferred_names{:}, upper(PreferredName{i})};
        vid = [vid, VolcanoID{i}];
        
    end

end

ALT.Alternates = alt_names';
ALT.Preferred = preferred_names';
ALT.VID = vid';
ALT = struct2table(ALT);

PREF.VID = upper(VolcanoID);
PREF.PreferredName = upper(PreferredName);
PREF.AlternateName = upper(AlternateNames_nocomments');
PREF = struct2table(PREF);

end