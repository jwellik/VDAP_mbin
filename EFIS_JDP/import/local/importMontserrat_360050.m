%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Volumes/EFIS_seis/SEISMICDATA/JPOWER/Montserrat/Locations/MONTSRAT.DAT
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/05/08 17:15:01
clear

%% Initialize variables.
% filename = '/Volumes/EFIS_seis/SEISMICDATA/JPOWER/Montserrat/Locations/MONTSRAT.DAT';
filename = '/Users/jpesicek/Dropbox/Research/EFIS/global5/UnitedKingdom/SoufrièreHills/MONTSRAT.DAT';
odir = '/Users/jpesicek/Dropbox/Research/EFIS/localCatalogs/';
vid = 360050;
author = 'local';
%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%6s%3s%2s%6s%9s%10s%7s%7s%3s%4s%5s%5s%5s%5s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '',  'ReturnOnError', false);

%% Remove white space around all cell columns.
dataArray{5} = strtrim(dataArray{5});
dataArray{6} = strtrim(dataArray{6});
dataArray{15} = strtrim(dataArray{15});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,7,8,9,10,11,12,13,14]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,7,8,9,10,11,12,13,14]);
rawCellColumns = raw(:, [5,6,15]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
cat.YMD = cell2mat(rawNumericColumns(:, 1));
cat.Hour = cell2mat(rawNumericColumns(:, 2));
cat.Minute = cell2mat(rawNumericColumns(:, 3));
cat.Second = cell2mat(rawNumericColumns(:, 4));
cat.Latitude = rawCellColumns(:, 1);
cat.Longitude = rawCellColumns(:, 2);
cat.Depth = cell2mat(rawNumericColumns(:, 5));
cat.Magnitude = cell2mat(rawNumericColumns(:, 6));
cat.NO = cell2mat(rawNumericColumns(:, 7));
cat.DM = cell2mat(rawNumericColumns(:, 8));
cat.GAP = cell2mat(rawNumericColumns(:, 9));
cat.RMS = cell2mat(rawNumericColumns(:, 10));
cat.ERH = cell2mat(rawNumericColumns(:, 11));
cat.ERZ = cell2mat(rawNumericColumns(:, 12));
cat.D1 = rawCellColumns(:, 3);


%% Clear temporary variables
clearvars filename formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;

%%
is = []; in = []; ie = []; iw = [];
for lat = 1:length(cat.Latitude)
    
    id = strfind(cat.Latitude{lat},'-');
    
    d = str2num(cat.Latitude{lat}(1:id-1));
    m = str2num(cat.Latitude{lat}(id+1:end));
    Latitude2(lat) = dm2degrees([d m]);
%     
    iw = strfind(cat.Longitude{lat},'-');
    
    d = -str2num(cat.Longitude{lat}(1:iw-1));
    m = str2num(cat.Longitude{lat}(iw+1:end));
    Longitude2(lat) = dm2degrees([d m]);
    
    str = num2str(cat.YMD(lat));
    yy = str(1:2);
    mm = str(3:4);
    dd = str(5:6);

    dn(lat) = datenum(1900+str2num(yy),str2num(mm),str2num(dd),cat.Hour(lat),cat.Minute(lat),cat.Second(lat));
end

cat.Latitude = Latitude2';
cat.Longitude = Longitude2';

for i=1:lat
    
    catalog(i).DateTime = datestr(dn(i),'yyyy/mm/dd HH:MM:SS.FFF');
    catalog(i).Latitude = cat.Latitude(i);
    catalog(i).Longitude = cat.Longitude(i);
    catalog(i).AUTHOR = author;
    catalog(i).EVENTID = i;
    catalog(i).Depth = cat.Depth(i);
    catalog(i).Magnitude = cat.Magnitude(i);
    catalog(i).TYPE = 'hypo71';
    catalog(i).NO = cat.NO(i);
    catalog(i).DM = cat.DM(i);
    catalog(i).GAP = cat.GAP(i);
    catalog(i).RMS = cat.RMS(i);
    catalog(i).ERH = cat.ERH(i);
    catalog(i).ERZ = cat.ERZ(i);
    
end
% figure, plot3(extractfield(catalog,'Longitude'),extractfield(catalog,'Latitude'),-1*extractfield(catalog,'Depth'),'.')
% grid on
% save('MontSoufHills_360050','catalog')
%% remove dups
[ percentDuplicates, ID ] = check4duplicateEvents(catalog);
catalog = catalog(~ID);
%%
dtimes = datenum(extractfield(catalog,'DateTime'));
if ~issorted(dtimes)
    [~,I] = sort(dtimes); 
    catalog = catalog(I);
end
%%
save(fullfile(odir,['local_',int2str(vid)]),'catalog')

%% general params
params.srad = [0 50];
params.DepthRange = [-3 35]; % km
params.MagRange = [0 10];
params.YearRange = [1964 2015];
params.topo = true;

%% wingPlot params
params.visible = 'on';
params.maxEvents2plot = 10000;

vFile = dir2(odir,'vinfo*.mat');
vinfo=getVolcanoInfoFromNameOrNum(vid);
[vinfo.outerAnnulus,vinfo.innerAnnulus] = getAnnulusm(vinfo.lat,vinfo.lon,params.srad(2));
mapdata = prep4WingPlot(vinfo,params,[],vinfo.outerAnnulus,vinfo.innerAnnulus);

t1=min(dn);
t2=max(dn);
figname=fullfile(odir,['local_',int2str(vid)]);
fh_wingplot = wingPlot1(vinfo, t1, t2, catalog, mapdata, params,1);
print(fh_wingplot,'-dpng',[figname,'.png'])
% close(fh_wingplot)

figure
subplot(2,1,1)
histogram(extractfield(catalog,'Magnitude'))
xlabel('Magnitude')
subplot(2,1,2)
histogram(extractfield(catalog,'Depth'))
xlabel('Depth')
print(gcf,'-dpng',[figname,'_QC'])
